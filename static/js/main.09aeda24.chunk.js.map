{"version":3,"sources":["state/actions/points/pointsReducers.js","state/actions/nameAndValuePoints/nameAndValuePointsReducer.js","state/actions/selections/selectionsReducer.js","state/rootReducer.js","state/types.js","store.js","state/actions/points/pointsActions.js","state/actions/selections/selectionsActions.js","views/components/dataInputs/XYDataInput.js","state/actions/nameAndValuePoints/nameAndValuePointsActions.js","views/components/dataInputs/NameAndValueDataInput.js","views/components/charts/PointsChart.js","views/components/charts/LinesChart.js","views/components/charts/HorizontalBarChart.js","views/components/charts/VerticalBarChart.js","views/components/charts/CircleChart.js","views/pages/MainPage.js","views/components/Header.js","App.js","index.js"],"names":["initialState","points","selections","family","xLabel","yLabel","nameLabel","valueLabel","helpVisible","appReducer","combineReducers","XandYPoints","state","arguments","length","undefined","action","type","push","payload","sort","a","b","x","Object","objectSpread","filter","point","id","forEach","newX","y","newY","NameAndValuePoints","name","value","Selections","rootReducer","middleware","thunk","store","createStore","compose","applyMiddleware","apply","addPoint","dispatch","removePoint","editPoint","setXLabel","newLabel","setYLabel","setNameLabel","setValueLabel","XYDataInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","newPoint","uuid","isNaN","errorMessage","xValues","values","$","scrollTop","scrollHeight","xInputRef","React","createRef","yInputRef","editMode","xEditMode","yEditMode","val","edit","data","_this2","react_default","createElement","className","ref","autoFocus","defaultValue","onBlur","current","onClick","map","key","includes","Fragment","editModeTurnOff","editModeTurnOn","colSpan","Component","connect","NameAndValueDataInput","newRecord","newName","newValue","nameInputRef","valueInputRef","nameEditMode","valueEditMode","PointsChart","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","YAxis","angle","Tooltip","cursor","Legend","align","verticalAlign","Scatter","fill","color","LinesChart","LineChart","Line","stroke","HorizontalBarChart","BarChart","barSize","ReferenceLine","Bar","VerticalBarChart","layout","CircleChart","Number","PieChart","Pie","isAnimationActive","cx","cy","outerRadius","renderCustomizedLabel","console","log","MainPage","handleClick","displayColorPicker","handleClose","event","handleChange","rgb","hexColor","hex","NumbersChartType","TextChartType","r","g","labelXYX","labelXYY","setSelectedChartsFamily","components_dataInputs_XYDataInput","components_dataInputs_NameAndValueDataInput","xypoints","nvpoints","lib","Header","csvXYFileAdded","removeAllXYPoints","item","index","addXYPoint","bind","assertThisInitialized","csvNameValueFileAdded","removeAllNameAndValuePoints","addNameValuePoint","csvXYData","_csvXYData$push","csvNameValueData","_csvNameValueData$pus","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","aria-labelledby","react_csv","filename","react_csv_reader_default","cssClass","onFileLoaded","onError","handleDarkSideForce","inputId","inputStyle","setHelpVisible","visible","App","react_redux_es","components_Header","views_pages_MainPage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.09aeda24.chunk.js","sourcesContent":["import {\n    ADD_XY_POINT,\n    REMOVE_XY_POINT,\n    EDIT_XY_POINT,\n    REMOVE_ALL_XY_POINTS\n} from \"../../types\";\n\nconst initialState = {\n    points: {\n        points: []\n    }\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case ADD_XY_POINT:\n            let points = state.points.points;\n            points.push(action.payload);\n            points.sort(function (a, b) {\n                return a.x - b.x;\n            });\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case REMOVE_XY_POINT:\n            points = state.points.points;\n            points = points.filter(point => {\n                return point.id !== action.payload\n            });\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case EDIT_XY_POINT:\n            points = state.points.points;\n            points.forEach((point, id) => {\n                if (point.id === action.payload.id) {\n                    point.x = action.payload.newX;\n                    point.y = action.payload.newY;\n                }\n            });\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case REMOVE_ALL_XY_POINTS:\n            return {\n                ...state,\n                points: {\n                    points: []\n                }\n            };\n        default:\n            return state;\n    }\n}","import { ADD_NAMEANDVALUE_POINT, REMOVE_NAMEANDVALUE_POINT, EDIT_NAMEANDVALUE_POINT, REMOVE_ALL_NAMEANDVALUE_POINT } from \"../../types\";\n\nconst initialState = {\n    points: {\n        points: []\n    }\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case ADD_NAMEANDVALUE_POINT:\n            let points = state.points.points;\n            points.push(action.payload);\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case REMOVE_NAMEANDVALUE_POINT:\n            points = state.points.points;\n            points = points.filter(point => {\n                return point.id !== action.payload\n            });\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case EDIT_NAMEANDVALUE_POINT:\n            points = state.points.points;\n            points.forEach((point, id) => {\n                if (point.id === action.payload.id) {\n                    point.name = action.payload.newX;\n                    point.value = action.payload.newY;\n                }\n            });\n            return {\n                ...state,\n                points: {\n                    'points': points\n                }\n            };\n        case REMOVE_ALL_NAMEANDVALUE_POINT:\n            return {\n                ...state,\n                points: {\n                    points: []\n                }\n            };\n        default:\n            return state;\n    }\n}","import {\n    SET_SELECTED_CHARTS_FAMILY,\n    SET_X_LABEL,\n    SET_Y_LABEL,\n    SET_NAME_LABEL,\n    SET_VALUE_LABEL,\n    SET_HELP_VISIBLE\n} from \"../../types\";\n\nconst initialState = {\n    selections: {\n        family: 'Liczbowe',\n        xLabel: 'X',\n        yLabel: 'Y',\n        nameLabel: 'Nazwa',\n        valueLabel: 'Wartość',\n        helpVisible: false\n    }\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_SELECTED_CHARTS_FAMILY:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    family: action.payload\n                }\n            };\n        case SET_X_LABEL:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    xLabel: action.payload\n                }\n            };\n        case SET_Y_LABEL:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    yLabel: action.payload\n                }\n            };\n        case SET_NAME_LABEL:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    nameLabel: action.payload\n                }\n            };\n        case SET_VALUE_LABEL:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    valueLabel: action.payload\n                }\n            };\n        case SET_HELP_VISIBLE:\n            return {\n                ...state,\n                selections: {\n                    ...state.selections,\n                    helpVisible: action.payload\n                }\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\n\nimport XandYPointsReducer from \"./actions/points/pointsReducers\";\nimport NameAndValueReducer from \"./actions/nameAndValuePoints/nameAndValuePointsReducer\";\nimport SelectionsReducer from \"./actions/selections/selectionsReducer\";\n\nconst appReducer = combineReducers({\n    XandYPoints: XandYPointsReducer,\n    NameAndValuePoints: NameAndValueReducer,\n    Selections: SelectionsReducer\n});\n\nconst rootReducer = (state, action) => {\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","export const ADD_XY_POINT = 'ADD_XY_POINT';\nexport const REMOVE_XY_POINT = 'REMOVE_XY_POINT';\nexport const EDIT_XY_POINT = 'EDIT_XY_POINT';\nexport const REMOVE_ALL_XY_POINTS = 'REMOVE_ALL_XY_POINTS';\n\nexport const ADD_NAMEANDVALUE_POINT = 'ADD_NAMEANDVALUE_POINT';\nexport const REMOVE_NAMEANDVALUE_POINT = 'REMOVE_NAMEANDVALUE_POINT';\nexport const EDIT_NAMEANDVALUE_POINT = 'EDIT_NAMEANDVALUE_OINT';\nexport const REMOVE_ALL_NAMEANDVALUE_POINT = 'REMOVE_ALL_NAMEANDVALUE_POINT';\n\nexport const ADD_PAIR = 'ADD_PAIR';\nexport const REMOVE_PAIR = 'REMOVE_PAIR';\nexport const EDIT_PAIR = 'EDIT_PAIR';\n\nexport const SET_SELECTED_CHARTS_FAMILY = 'SET_SELECTED_CHARTS_FAMILY';\n\nexport const SET_X_LABEL = 'SET_X_LABEL';\nexport const SET_Y_LABEL = 'SET_Y_LABEL';\nexport const SET_NAME_LABEL = 'SET_NAME_LABEL';\nexport const SET_VALUE_LABEL = 'SET_VALUE_LABEL';\n\nexport const SET_HELP_VISIBLE = \"SET_HELP_VISIBLE\";","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './state/rootReducer';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n  )\n);\n\nexport default store;\n","import { ADD_XY_POINT, REMOVE_XY_POINT, EDIT_XY_POINT, REMOVE_ALL_XY_POINTS } from '../../types';\n\nexport const addPoint = (point) => dispatch => {\n    dispatch({\n        type: ADD_XY_POINT,\n        payload: point\n    })\n};\n\nexport const removePoint = (id) => dispatch => {\n    dispatch({\n        type: REMOVE_XY_POINT,\n        payload: id\n    })\n};\n\nexport const editPoint = (id, newX, newY) => dispatch => {\n    dispatch({\n        type: EDIT_XY_POINT,\n        payload: {\n            id,\n            newX,\n            newY\n        }\n    })\n};\n\nexport const removeAllXYPoints = () => dispatch => {\n    dispatch({\n        type: REMOVE_ALL_XY_POINTS,\n        payload: {}\n    })\n};","import { SET_SELECTED_CHARTS_FAMILY, SET_X_LABEL, SET_Y_LABEL, SET_NAME_LABEL, SET_VALUE_LABEL, SET_HELP_VISIBLE } from '../../types';\n\nexport const setSelectedChartsFamily = (family) => dispatch => {\n    dispatch({\n        type: SET_SELECTED_CHARTS_FAMILY,\n        payload: family\n    })\n};\n\nexport const setXLabel = (newLabel) => dispatch => {\n    dispatch({\n        type: SET_X_LABEL,\n        payload: newLabel\n    })\n};\n\nexport const setYLabel = (newLabel) => dispatch => {\n    dispatch({\n        type: SET_Y_LABEL,\n        payload: newLabel\n    })\n};\n\nexport const setNameLabel = (newLabel) => dispatch => {\n    dispatch({\n        type: SET_NAME_LABEL,\n        payload: newLabel\n    })\n};\n\nexport const setValueLabel = (newLabel) => dispatch => {\n    dispatch({\n        type: SET_VALUE_LABEL,\n        payload: newLabel\n    })\n};\n\nexport const setHelpVisible = (visible) => dispatch => {\n    dispatch({\n        type: SET_HELP_VISIBLE,\n        payload: visible\n    })\n}","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport {\n    addPoint,\n    removePoint,\n    editPoint\n} from \"../../../state/actions/points/pointsActions\";\n\n\nimport {\n    setXLabel,\n    setYLabel\n} from \"../../../state/actions/selections/selectionsActions\";\n\nimport uuid from \"uuid\";\n\nimport $ from \"jquery\";\n\nimport \"./XYDataInput.css\";\n\nclass XYDataInput extends Component {\n    constructor(props) {\n        super(props);\n\n        this.xInputRef = React.createRef();\n        this.yInputRef = React.createRef();\n\n\n        this.state = {\n            points: [],\n            newX: \"\",\n            newY: \"\",\n            errorMessage: \"\",\n            editMode: [],\n            type: \"Punktowy\",\n            xEditMode: false,\n            yEditMode: false\n        };\n    }\n\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    addPoint = () => {\n        const newPoint = {\n            id: uuid(),\n            x: this.state.newX,\n            y: this.state.newY\n        };\n\n        if (newPoint.x !== \"\" && newPoint.y !== \"\") {\n            if (isNaN(newPoint.x)) {\n                this.setState({\n                    errorMessage: \"Wartość X nie jest liczbą\"\n                });\n                return;\n            }\n\n            if (isNaN(newPoint.y)) {\n                this.setState({\n                    errorMessage: \"Wartość Y nie jest liczbą\"\n                });\n                return;\n            }\n\n            let xValues = Object.values(this.props.points.points).filter(point => {\n                return point.x === newPoint.x;\n            })\n\n            if (Object.values(xValues).length > 0) {\n                this.setState({\n                    errorMessage: \"Taka wartość X już istnieje\"\n                });\n                return;\n            }\n\n\n            this.props.addPoint(newPoint);\n            this.setState({\n                errorMessage: \"\",\n                newX: \"\",\n                newY: \"\"\n            });\n\n            $(\"#listDiv\").scrollTop($(\"#listDiv\")[0].scrollHeight);\n        } else {\n            this.setState({\n                errorMessage: \"Obie wartości muszą być wypełnione\"\n            });\n        }\n    };\n\n    removePoint(id) {\n        this.props.removePoint(id);\n    }\n\n    editModeTurnOn(id) {\n        let editMode = this.state.editMode;\n        editMode.push(id);\n        this.setState({\n            editMode: editMode\n        });\n    }\n\n    editModeTurnOff(id) {\n        let newX = $(\"#x_\" + id).val();\n        let newY = $(\"#y_\" + id).val();\n\n        let edit = true;\n\n        if (newX === \"\" || newY === \"\") {\n            this.setState({\n                errorMessage:\n                    \"Nie można było zmienić wartości, ponieważ nowa wartość jest pusta\"\n            });\n            edit = false;\n        }\n        if (isNaN(newX) || isNaN(newY)) {\n            this.setState({\n                errorMessage:\n                    \"Nie można było zmienić wartości. Obie nowe wartości musza być liczbami\"\n            });\n            edit = false;\n        }\n\n        if (edit) this.props.editPoint(id, newX, newY);\n\n        let editMode = this.state.editMode;\n\n        editMode = editMode.filter(data => {\n            return data !== id;\n        });\n        this.setState({\n            editMode: editMode\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>\n                    <strong>Dane:</strong>\n                </h4>\n                <div className=\"list\" id=\"listDiv\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                {this.state.xEditMode === true ?\n                                    <th className=\"valueWidth\"><input ref={this.xInputRef} className=\"inputField\"\n                                        autoFocus={true}\n                                        defaultValue={this.props.selections.xLabel}\n                                        onBlur={() => {\n\n                                            this.props.setXLabel(this.xInputRef.current.value);\n\n\n                                            this.setState({\n                                                xEditMode: false\n                                            })\n                                        }\n                                        }\n                                    /></th>\n                                    :\n                                    <th className=\"valueWidth\"\n                                        onClick={() => {\n                                            this.setState({\n                                                xEditMode: true\n                                            })\n                                        }\n                                        }\n                                    >{this.props.selections.xLabel}</th>\n                                }\n                                {this.state.yEditMode === true ?\n                                    <th className=\"valueWidth\"><input ref={this.yInputRef} className=\"inputField\"\n                                        autoFocus={true}\n                                        defaultValue={this.props.selections.yLabel}\n                                        onBlur={() => {\n\n                                            this.props.setYLabel(this.yInputRef.current.value);\n\n\n                                            this.setState({\n                                                yEditMode: false\n                                            })\n                                        }\n                                        }\n                                    /></th>\n                                    :\n                                    <th className=\"valueWidth\"\n                                        onClick={() => {\n                                            this.setState({\n                                                yEditMode: true\n                                            })\n                                        }\n                                        }\n                                    >{this.props.selections.yLabel}</th>\n                                }\n                                <th>Akcje</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.values(this.props.points.points).map(point => (\n                                <tr key={uuid()}>\n                                    {!this.state.editMode.includes(point.id) && (\n                                        <React.Fragment>\n                                            <td className=\"valueWidth\">{point.x}</td>\n                                            <td className=\"valueWidth\">{point.y}</td>\n                                        </React.Fragment>\n                                    )}\n                                    {this.state.editMode.includes(point.id) && (\n                                        <React.Fragment>\n                                            <td className=\"valueWidth\">\n                                                <input\n                                                    className=\"newValueInput text-center\"\n                                                    defaultValue={point.x}\n                                                    id={\"x_\" + point.id}\n                                                />\n                                            </td>\n                                            <td className=\"valueWidth\">\n                                                <input\n                                                    className=\"newValueInput text-center\"\n                                                    defaultValue={point.y}\n                                                    id={\"y_\" + point.id}\n                                                />\n                                            </td>\n                                        </React.Fragment>\n                                    )}\n                                    <td className=\"buttonsWidth\">\n                                        {this.state.editMode.includes(point.id) ? (\n                                            <button\n                                                className=\"btn btn-success btn-small tableButton mx-3\"\n                                                onClick={() => {\n                                                    this.editModeTurnOff(point.id);\n                                                }}\n                                            >\n                                                Zapisz\n                                        </button>\n                                        ) : (\n                                                <button\n                                                    className=\"btn btn-success btn-small tableButton mx-3\"\n                                                    onClick={() => {\n                                                        this.editModeTurnOn(point.id);\n                                                    }}\n                                                >\n                                                    Edytuj\n                                        </button>\n                                            )}\n                                        <button\n                                            className=\"btn btn-danger btn-small tableButton mx-3\"\n                                            onClick={() => {\n                                                this.removePoint(point.id);\n                                            }}\n                                        >\n                                            Usuń\n                                    </button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th />\n                            <th />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <input\n                                    className=\"form-input text-center newValueInput\"\n                                    name=\"newX\"\n                                    id=\"newX\"\n                                    value={this.state.newX}\n                                    onChange={this.onChange}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className=\"form-input text-center newValueInput\"\n                                    name=\"newY\"\n                                    id=\"newY\"\n                                    value={this.state.newY}\n                                    onChange={this.onChange}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"3\">\n                                <button\n                                    className=\"btn btn-primary btn-block btn-sm\"\n                                    onClick={this.addPoint}\n                                >\n                                    Dodaj\n                            </button>\n                            </td>\n                        </tr>\n                        {this.props.selections.helpVisible &&\n                            <tr>\n                                <td colSpan=\"3\">\n                                    <span className=\"text-muted\">Przy tej wybranej rodzinie wykresów obie wprowadzane wartości muszą być wartościami numerycznymi</span>\n                                </td>\n                            </tr>\n                        }\n                    </tbody>\n                </table>\n                <h6 className=\"text-danger\"> {this.state.errorMessage} </h6>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    points: state.XandYPoints.points,\n    selections: state.Selections.selections\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        addPoint,\n        removePoint,\n        editPoint,\n        setXLabel,\n        setYLabel\n    }\n)(XYDataInput);\n","import {\n    ADD_NAMEANDVALUE_POINT,\n    REMOVE_NAMEANDVALUE_POINT,\n    EDIT_NAMEANDVALUE_POINT,\n    REMOVE_ALL_NAMEANDVALUE_POINT\n} from \"../../types\";\n\nexport const addPoint = (point) => dispatch => {\n    dispatch({\n        type: ADD_NAMEANDVALUE_POINT,\n        payload: point\n    })\n};\n\nexport const removePoint = (id) => dispatch => {\n    dispatch({\n        type: REMOVE_NAMEANDVALUE_POINT,\n        payload: id\n    })\n};\n\nexport const editPoint = (id, newX, newY) => dispatch => {\n    dispatch({\n        type: EDIT_NAMEANDVALUE_POINT,\n        payload: {\n            id,\n            newX,\n            newY\n        }\n    })\n};\n\nexport const removeAllNameAndValuePoints = () => dispatch => {\n    dispatch({\n        type: REMOVE_ALL_NAMEANDVALUE_POINT,\n        payload: {}\n    })\n};","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport {\n    addPoint,\n    removePoint,\n    editPoint\n} from \"../../../state/actions/nameAndValuePoints/nameAndValuePointsActions\";\n\nimport {\n    setNameLabel,\n    setValueLabel\n} from \"../../../state/actions/selections/selectionsActions\";\n\nimport uuid from \"uuid\";\n\nimport $ from \"jquery\";\n\nimport \"./NameAndValueDataInput.css\";\n\nclass NameAndValueDataInput extends Component {\n    constructor(props) {\n        super(props);\n\n        this.nameInputRef = React.createRef();\n        this.valueInputRef = React.createRef();\n\n        this.state = {\n            points: [],\n            newName: \"\",\n            newValue: \"\",\n            errorMessage: \"\",\n            editMode: [],\n            type: \"Punktowy\",\n            nameEditMode: false,\n            valueEditMode: false\n        };\n    }\n\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    addPoint = () => {\n        const newRecord = {\n            id: uuid(),\n            name: this.state.newName,\n            value: this.state.newValue\n        };\n\n        if (newRecord.name !== \"\" && newRecord.value !== \"\") {\n            if (isNaN(newRecord.value)) {\n                this.setState({\n                    errorMessage: \"Wartość Y nie jest liczbą\"\n                });\n                return;\n            }\n\n            this.props.addPoint(newRecord);\n            this.setState({\n                errorMessage: \"\",\n                newName: \"\",\n                newValue: \"\"\n            });\n\n            $(\"#listDiv\").scrollTop($(\"#listDiv\")[0].scrollHeight);\n        } else {\n            this.setState({\n                errorMessage: \"Obie wartości muszą być wypełnione\"\n            });\n        }\n    };\n\n    removePoint(id) {\n        this.props.removePoint(id);\n    }\n\n    editModeTurnOn(id) {\n        let editMode = this.state.editMode;\n        editMode.push(id);\n        this.setState({\n            editMode: editMode\n        });\n    }\n\n    editModeTurnOff(id) {\n        let newName = $(\"#x_\" + id).val();\n        let newValue = $(\"#y_\" + id).val();\n\n        let edit = true;\n\n        if (newName === \"\" || newValue === \"\") {\n            this.setState({\n                errorMessage:\n                    \"Nie można było zmienić wartości, ponieważ nowa wartość jest pusta\"\n            });\n            edit = false;\n        }\n        if (isNaN(newValue)) {\n            this.setState({\n                errorMessage:\n                    \"Nie można było zmienić wartości. Nowa wartość Y musi być liczbą\"\n            });\n            edit = false;\n        }\n\n        if (edit) this.props.editPoint(id, newName, newValue);\n\n        let editMode = this.state.editMode;\n\n        editMode = editMode.filter(data => {\n            return data !== id;\n        });\n        this.setState({\n            editMode: editMode\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>\n                    <strong>Dane:</strong>\n                </h4>\n                <div className=\"list\" id=\"listDiv\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                {this.state.nameEditMode === true ?\n                                    <th className=\"valueWidth\"><input ref={this.nameInputRef} className=\"inputField\"\n                                        autoFocus={true}\n                                        defaultValue={this.props.selections.nameLabel}\n                                        onBlur={() => {\n\n                                            this.props.setNameLabel(this.nameInputRef.current.value);\n\n\n                                            this.setState({\n                                                nameEditMode: false\n                                            })\n                                        }\n                                        }\n                                    /></th>\n                                    :\n                                    <th className=\"valueWidth\"\n                                        onClick={() => {\n                                            this.setState({\n                                                nameEditMode: true\n                                            })\n                                        }\n                                        }\n                                    >{this.props.selections.nameLabel}</th>\n                                }\n                                {this.state.valueEditMode === true ?\n                                    <th className=\"valueWidth\"><input ref={this.valueInputRef} className=\"inputField\"\n                                        autoFocus={true}\n                                        defaultValue={this.props.selections.valueLabel}\n                                        onBlur={() => {\n\n                                            this.props.setValueLabel(this.valueInputRef.current.value);\n\n\n                                            this.setState({\n                                                valueEditMode: false\n                                            })\n                                        }\n                                        }\n                                    /></th>\n                                    :\n                                    <th className=\"valueWidth\"\n                                        onClick={() => {\n                                            this.setState({\n                                                valueEditMode: true\n                                            })\n                                        }\n                                        }\n                                    >{this.props.selections.valueLabel}</th>\n                                }\n                                <th>Akcje</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.values(this.props.points.points).map(point => (\n                                <tr key={uuid()}>\n                                    {!this.state.editMode.includes(point.id) && (\n                                        <React.Fragment>\n                                            <td className=\"valueWidth\">{point.name}</td>\n                                            <td className=\"valueWidth\">{point.value}</td>\n                                        </React.Fragment>\n                                    )}\n                                    {this.state.editMode.includes(point.id) && (\n                                        <React.Fragment>\n                                            <td className=\"valueWidth\">\n                                                <input\n                                                    className=\"newValueInput text-center\"\n                                                    defaultValue={point.name}\n                                                    id={\"x_\" + point.id}\n                                                />\n                                            </td>\n                                            <td className=\"valueWidth\">\n                                                <input\n                                                    className=\"newValueInput text-center\"\n                                                    defaultValue={point.value}\n                                                    id={\"y_\" + point.id}\n                                                />\n                                            </td>\n                                        </React.Fragment>\n                                    )}\n                                    <td className=\"buttonsWidth\">\n                                        {this.state.editMode.includes(point.id) ? (\n                                            <button\n                                                className=\"btn btn-success btn-small tableButton mx-3\"\n                                                onClick={() => {\n                                                    this.editModeTurnOff(point.id);\n                                                }}\n                                            >\n                                                Zapisz\n                                        </button>\n                                        ) : (\n                                                <button\n                                                    className=\"btn btn-success btn-small tableButton mx-3\"\n                                                    onClick={() => {\n                                                        this.editModeTurnOn(point.id);\n                                                    }}\n                                                >\n                                                    Edytuj\n                                        </button>\n                                            )}\n                                        <button\n                                            className=\"btn btn-danger btn-small tableButton mx-3\"\n                                            onClick={() => {\n                                                this.removePoint(point.id);\n                                            }}\n                                        >\n                                            Usuń\n                                    </button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th />\n                            <th />\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <input\n                                    className=\"form-input text-center newNameInput\"\n                                    name=\"newName\"\n                                    id=\"newName\"\n                                    value={this.state.newName}\n                                    onChange={this.onChange}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    className=\"form-input text-center newValueInput\"\n                                    name=\"newValue\"\n                                    id=\"newValue\"\n                                    value={this.state.newValue}\n                                    onChange={this.onChange}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"3\">\n                                <button\n                                    className=\"btn btn-primary btn-block btn-sm\"\n                                    onClick={this.addPoint}\n                                >\n                                    Dodaj\n                            </button>\n                            </td>\n                        </tr>\n                        {this.props.selections.helpVisible &&\n                            <tr>\n                                <td colSpan=\"3\">\n                                    <span className=\"text-muted\">Przy tej wybranej rodzinie wykresów pierwsza wartość może być dowolnym słowem (kategoria),\n                            a druga wartością numeryczną</span>\n                                </td>\n                            </tr>\n                        }\n                    </tbody>\n                </table>\n                <h6 className=\"text-danger\"> {this.state.errorMessage} </h6>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    points: state.NameAndValuePoints.points,\n    selections: state.Selections.selections\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        addPoint,\n        removePoint,\n        editPoint,\n        setNameLabel,\n        setValueLabel\n    }\n)(NameAndValueDataInput);\n","import React from \"react\";\n\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport default function PointsChart(props) {\n\n  return (\n    <React.Fragment>\n      <ScatterChart\n        width={760}\n        height={500}\n        margin={{ top: 20, right: 20, bottom: 10, left: 10 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis type=\"number\" dataKey=\"x\" name=\"x\" label={{ value: props.xLabel, position: 'insideBottom', offset: 0 }} />\n        <YAxis type=\"number\" dataKey=\"y\" name=\"y\" label={{ value: props.yLabel, angle: -90, position: 'insideLeft' }} />\n\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n        <Legend align=\"right\" verticalAlign=\"middle\" />\n        <Scatter name=\"Dane\" data={props.points.points} fill={props.color} />\n      </ScatterChart>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\n\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Line,\n  LineChart\n} from \"recharts\";\n\nexport default function LinesChart(props) {\n  let data = [];\n\n  props.points.points.forEach(point => {\n    data.push({\n      x: point.x,\n      y: point.y\n    });\n  });\n\n  return (\n    <React.Fragment>\n      <LineChart\n        width={760}\n        height={500}\n        data={data}\n        margin={{ top: 20, right: 20, left: 10, bottom: 10 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"x\" type=\"number\" label={{ value: props.xLabel, position: 'insideBottom', offset: 0 }} />\n        <YAxis label={{ value: props.yLabel, angle: -90, position: 'insideLeft' }} />\n        <Tooltip />\n        <Legend align=\"right\" verticalAlign=\"middle\" />\n        <Line type=\"monotone\" dataKey=\"y\" stroke={props.color} />\n      </LineChart>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\n\nimport {\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    BarChart,\n    Bar,\n    ReferenceLine\n} from \"recharts\";\n\nexport default function HorizontalBarChart(props) {\n\n    let data = [];\n\n    props.points.points.forEach(point => {\n        data.push({\n            name: point.name,\n            value: point.value\n        });\n    });\n\n    return (\n        <React.Fragment>\n            <BarChart\n                width={760}\n                height={500}\n                data={data}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                barSize={20}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" label={{ value: props.nameLabel, position: 'insideBottom', offset: 0 }} />\n                <YAxis label={{ value: props.valueLabel, angle: -90, position: 'insideLeft' }} />\n                <Tooltip />\n                <Legend align=\"right\" verticalAlign=\"middle\" />\n                <ReferenceLine y={0} stroke='#000' />\n                <Bar dataKey=\"value\" name=\"Dane\" fill={props.color} />\n            </BarChart>\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\n\nimport {\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    BarChart,\n    Bar,\n    ReferenceLine\n} from \"recharts\";\n\nexport default function VerticalBarChart(props) {\n\n    let data = [];\n\n    props.points.points.forEach(point => {\n        data.push({\n            name: point.name,\n            value: point.value\n        });\n    });\n\n    return (\n        <React.Fragment>\n            <BarChart\n                width={760}\n                height={500}\n                data={data}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                layout=\"vertical\"\n                barSize={20}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" label={{ value: props.valueLabel, position: 'insideBottom', offset: 0 }} />\n                <YAxis dataKey=\"name\" type=\"category\" label={{ value: props.nameLabel, angle: -90, position: 'insideLeft' }} />\n                <Tooltip />\n                <Legend align=\"right\" verticalAlign=\"middle\" />\n                <ReferenceLine y={0} stroke='#000' />\n                <Bar dataKey=\"value\" name=\"Dane\" fill={props.color} />\n            </BarChart>\n        </React.Fragment>\n    );\n}\n","import React from \"react\";\n\nimport {\n    Pie,\n    PieChart\n} from \"recharts\";\n\nexport default function CircleChart(props) {\n\n    let data = [];\n\n    props.points.points.forEach(point => {\n        data.push({\n            name: point.name,\n            value: Number(point.value)\n        });\n    });\n\n    return (\n        <React.Fragment>\n            <PieChart width={760} height={500}>\n                <Pie\n                    isAnimationActive={true}\n                    data={data}\n                    cx={370}\n                    cy={250}\n                    outerRadius={200}\n                    fill={props.color}\n                    dataKey=\"value\"\n                    label={renderCustomizedLabel}\n                />\n            </PieChart>\n\n        </React.Fragment>\n    );\n}\n\n\nconst renderCustomizedLabel = (data) => {\n    console.log(data);\n    return data.name + \": \" + data.value;\n};","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { CirclePicker } from 'react-color';\n\nimport {\n    addPoint,\n    removePoint,\n    editPoint\n} from \"../../state/actions/points/pointsActions\";\n\nimport { setSelectedChartsFamily } from \"../../state/actions/selections/selectionsActions\"\n\nimport XYDataInput from \"../components/dataInputs/XYDataInput\";\nimport NameAndValueDataInput from \"../components/dataInputs/NameAndValueDataInput\";\n\nimport PointsChart from \"../components/charts/PointsChart\";\nimport LinesChart from \"../components/charts/LinesChart\";\nimport HorizontalBarChart from \"../components/charts/HorizontalBarChart\";\nimport VerticalBarChart from \"../components/charts/VerticalBarChart\";\nimport CircleChart from \"../components/charts/CircleChart\";\n\nimport './MainPage.css'\n\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            XandYPoints: [],\n            NumbersChartType: \"Punktowy\",\n            TextChartType: \"KolumnowyHoryzontalny\",\n            displayColorPicker: false,\n            color: {\n                r: '66',\n                g: '134',\n                b: '244',\n                a: '1',\n            },\n            hexColor: '#4286f4',\n            labelXYX: \"X\",\n            labelXYY: \"Y\"\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n\n    handleClose = (event) => {\n        console.log(event);\n        this.setState({ displayColorPicker: false })\n    };\n\n    handleChange = (color) => {\n        console.log(color);\n        this.setState({\n            color: color.rgb,\n            hexColor: color.hex\n        })\n    };\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div className=\"row mt-2\">\n                    <div className=\"col-sm-12 center\">\n                        <h3>Wybór rodziny wykresów:</h3>\n                        <button\n                            className=\"btn btn-dark mx-4\"\n                            onClick={() => {\n                                this.props.setSelectedChartsFamily(\"Liczbowe\");\n                            }}\n                        >Liczbowe\n                        </button>\n                        <button\n                            className=\"btn btn-dark mx-4\"\n                            onClick={() => {\n                                this.props.setSelectedChartsFamily(\"Tekstowe\");\n                            }}\n                        >Tekstowe\n                        </button>\n                    </div>\n                </div>\n                {this.props.selections.helpVisible &&\n                    <div className=\"row mt-2\">\n                        <div className=\"col-sm-6 center\">\n                            <span className=\"text-muted\">Wykresy liczbowe to wykres punktowy i liniowy</span>\n                        </div>\n                        <div className=\"col-sm-6 center\">\n                            <span className=\"text-muted\">Wykresy tekstowe to wykresy kolumnowe (horyzontalne i wertykalne\n                        oraz wykres kołowy</span>\n                        </div>\n                    </div>\n                }\n\n                <div className=\"row\">\n                    {this.props.selections.family === \"Liczbowe\" &&\n                        <div className=\"col-sm-4\">\n                            <XYDataInput />\n                        </div>\n                    }\n                    {this.props.selections.family === \"Tekstowe\" &&\n                        <div className=\"col-sm-4\">\n                            <NameAndValueDataInput />\n                        </div>\n                    }\n\n                    <div className=\"col-sm-8\">\n                        <h4>\n                            <strong>Wykres:</strong>\n                        </h4>\n                        {this.props.selections.family === \"Liczbowe\" &&\n                            <React.Fragment>\n                                <div className=\"chartArea\">\n                                    {\n                                        this.state.NumbersChartType === \"Punktowy\" && (\n                                            <PointsChart\n                                                points={this.props.xypoints}\n                                                color={this.state.hexColor}\n                                                xLabel={this.props.selections.xLabel}\n                                                yLabel={this.props.selections.yLabel}\n                                            />\n                                        )\n                                    }\n                                    {this.state.NumbersChartType === \"Liniowy\" && (\n                                        <LinesChart\n                                            points={this.props.xypoints}\n                                            color={this.state.hexColor}\n                                            xLabel={this.props.selections.xLabel}\n                                            yLabel={this.props.selections.yLabel}\n                                        />\n                                    )\n                                    }\n                                </div>\n                                <button\n                                    className=\"btn btn-dark mx-4\"\n                                    onClick={() => {\n                                        this.setState({\n                                            NumbersChartType: \"Punktowy\"\n                                        });\n                                    }}\n                                >\n                                    Punktowy\n                            </button>\n                                <button\n                                    className=\"btn btn-dark mx-4\"\n                                    onClick={() => {\n                                        this.setState({\n                                            NumbersChartType: \"Liniowy\"\n                                        });\n                                    }}\n                                >\n                                    Liniowy\n                            </button>\n                            </React.Fragment>\n                        }\n\n                        {this.props.selections.family === \"Tekstowe\" &&\n                            <React.Fragment>\n                                <div className=\"chartArea\">\n                                    {\n                                        this.state.TextChartType === \"KolumnowyHoryzontalny\" && (\n                                            <HorizontalBarChart\n                                                points={this.props.nvpoints}\n                                                color={this.state.hexColor}\n                                                nameLabel={this.props.selections.nameLabel}\n                                                valueLabel={this.props.selections.valueLabel}\n                                            />\n                                        )\n                                    }\n                                    {\n                                        this.state.TextChartType === \"KolumnowyWertykalny\" && (\n                                            <VerticalBarChart\n                                                points={this.props.nvpoints}\n                                                color={this.state.hexColor}\n                                                nameLabel={this.props.selections.nameLabel}\n                                                valueLabel={this.props.selections.valueLabel}\n                                            />\n                                        )\n                                    }\n                                    {\n                                        this.state.TextChartType === \"Kolowy\" && (\n                                            <CircleChart points={this.props.nvpoints} color={this.state.hexColor} />\n                                        )\n                                    }\n                                </div>\n                                <button\n                                    className=\"btn btn-dark mx-4\"\n                                    onClick={() => {\n                                        this.setState({\n                                            TextChartType: \"KolumnowyHoryzontalny\"\n                                        });\n                                    }}\n                                >\n                                    Kolumnowy Horyzontalny\n                            </button>\n                                <button\n                                    className=\"btn btn-dark mx-4\"\n                                    onClick={() => {\n                                        this.setState({\n                                            TextChartType: \"KolumnowyWertykalny\"\n                                        });\n                                    }}\n                                >\n                                    Kolumnowy Wertykalny\n                            </button>\n                                <button\n                                    className=\"btn btn-dark mx-4\"\n                                    onClick={() => {\n                                        this.setState({\n                                            TextChartType: \"Kolowy\"\n                                        });\n                                    }}\n                                >\n                                    Kołowy\n                            </button>\n                            </React.Fragment>\n                        }\n                        <div className=\"row\">\n                            <div className=\"col-sm-12\">\n                                <CirclePicker className=\"colorPicker\"\n                                    color={this.state.color}\n                                    onChange={this.handleChange} />\n\n                            </div>\n                        </div>\n                        {this.props.selections.helpVisible &&\n                            <div className=\"row mt-2\">\n                                <div className=\"col-sm-12 mx-auto\">\n                                    <span className=\"text-muted\">\n                                        Wybrany tutaj kolor będzie ustawiony dla wszystkich typów wykresów\n                                    </span>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    xypoints: state.XandYPoints.points,\n    nvpoints: state.NameAndValuePoints.points,\n    selections: state.Selections.selections\n\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        addPoint,\n        removePoint,\n        editPoint,\n        setSelectedChartsFamily\n    }\n)(MainPage);\n","import React, { Component } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport { connect } from \"react-redux\";\nimport CSVReader from 'react-csv-reader'\n\nimport {\n    addPoint as addXYPoint,\n    removeAllXYPoints\n} from \"../../state/actions/points/pointsActions\";\n\nimport {\n    addPoint as addNameValuePoint,\n    removeAllNameAndValuePoints\n} from \"../../state/actions/nameAndValuePoints/nameAndValuePointsActions\";\n\nimport {\n    setXLabel,\n    setYLabel,\n    setNameLabel,\n    setValueLabel,\n    setHelpVisible\n} from \"../../state/actions/selections/selectionsActions\";\nimport uuid from \"uuid\";\n\nclass Header extends Component {\n\n    csvXYFileAdded = (data) => {\n\n        this.props.removeAllXYPoints();\n\n        data.forEach(function (item, index) {\n            if (index !== 0) {\n\n                const newPoint = {\n                    id: uuid(),\n                    x: item[0],\n                    y: item[1]\n                };\n\n                if (!isNaN(newPoint.x) && !isNaN(newPoint.y)) {\n                    this.props.addXYPoint(newPoint);\n                }\n            } else {\n                this.props.setXLabel(item[0]);\n                this.props.setYLabel(item[1]);\n            }\n        }.bind(this));\n    };\n\n    csvNameValueFileAdded = (data) => {\n\n        this.props.removeAllNameAndValuePoints();\n\n        data.forEach(function (item, index) {\n            if (index !== 0) {\n\n                const newPoint = {\n                    id: uuid(),\n                    name: item[0],\n                    value: item[1]\n                };\n\n                if (!isNaN(newPoint.value)) {\n                    this.props.addNameValuePoint(newPoint);\n                }\n            } else {\n                this.props.setNameLabel(item[0]);\n                this.props.setValueLabel(item[1]);\n            }\n        }.bind(this));\n\n    }\n\n    \n\n    render() {\n        let csvXYData = [];\n        this.props.xypoints.points.forEach(point => {\n            csvXYData.push({\n                [this.props.selections.xLabel]: point.x,\n                [this.props.selections.yLabel]: point.y\n            });\n        });\n        let csvNameValueData = [];\n        this.props.nvpoints.points.forEach(point => {\n            csvNameValueData.push({\n                [this.props.selections.nameLabel]: point.name,\n                [this.props.selections.valueLabel]: point.value\n            });\n        });\n\n\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <div className=\"container\">\n                        <a className=\"navbar-brand\" href=\"/\">\n                            ChartsApp\n                        </a>\n\n                        <button\n                            className=\"navbar-toggler\"\n                            type=\"button\"\n                            data-toggle=\"collapse\"\n                            data-target=\"#navbarNav\"\n                            aria-controls=\"navbarNav\"\n                            aria-expanded=\"false\"\n                            aria-label=\"Toggle navigation\"\n                        >\n                            <span className=\"navbar-toggler-icon\" />\n                        </button>\n\n                        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item dropdown\">\n                                    <a className=\"nav-link dropdown-toggle active\" href=\"#\" id=\"navbarDropdownMenuLink\"\n                                        role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                        Plik\n                                    </a>\n                                    <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                                        <CSVLink data={csvXYData} filename={\"numericData.csv\"}\n                                            className=\"dropdown-item text-dark\"\n                                        >\n                                            Pobierz dane liczbowe jako plik CSV\n                                        </CSVLink>\n                                        <CSVLink\n                                            data={csvNameValueData}\n                                            filename={\"textData.csv\"}\n                                            className=\"dropdown-item text-dark\"\n                                        >\n                                            Pobierz dane tekstowe jako plik CSV\n                                        </CSVLink>\n                                        <div className=\"dropdown-divider\"></div>\n                                        <CSVReader\n                                            cssClass=\"csv-reader-input dropdown-item text-dark\"\n                                            label=\"Dodaj dane liczbowe z pliku CSV\"\n                                            onFileLoaded={this.csvXYFileAdded}\n                                            onError={this.handleDarkSideForce}\n                                            inputId=\"csvNewData\"\n                                            inputStyle={{ color: 'black' }}\n                                        />\n                                        <CSVReader\n                                            cssClass=\"csv-reader-input dropdown-item text-dark\"\n                                            label=\"Dodaj dane tekstowe z pliku CSV\"\n                                            onFileLoaded={this.csvNameValueFileAdded}\n                                            onError={this.handleDarkSideForce}\n                                            inputId=\"csvNewData\"\n                                            inputStyle={{ color: 'black' }}\n                                        />\n                                    </div>\n                                </li>\n\n                                <li className=\"nav-item dropdown\">\n                                    <a className=\"nav-link dropdown-toggle active\" href=\"#\" id=\"editNavbarMenuLink\"\n                                        role=\"button\"\n                                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                        Edycja\n                                    </a>\n                                    <div className=\"dropdown-menu\" aria-labelledby=\"editNavbarMenuLink\">\n                                        <a className=\"dropdown-item\" href=\"#\"\n                                            onClick={() => {\n                                                this.props.removeAllXYPoints();\n                                            }}\n                                        >Usuń wszystkie dane liczbowe</a>\n                                        <a className=\"dropdown-item\" href=\"#\"\n                                            onClick={() => {\n                                                this.props.removeAllNameAndValuePoints();\n                                            }}\n                                        >Usuń wszystkie dane tekstowe</a>\n                                    </div>\n                                </li>\n                                {this.props.selections.helpVisible === false &&\n                                    <li className=\"nav-item active\">\n                                        <a className=\"nav-link\" href=\"#\"\n                                            onClick={() => {\n                                                this.props.setHelpVisible(true);\n                                            }\n                                            }\n                                        >\n                                            Pokaż pomoc\n                                </a>\n                                    </li>\n                                }\n                                {this.props.selections.helpVisible === true &&\n                                    <li className=\"nav-item active\">\n                                        <a className=\"nav-link\" href=\"#\"\n                                            onClick={() => {\n                                                this.props.setHelpVisible(false);\n                                            }\n                                            }\n                                        >\n                                            Ukryj pomoc\n                                    </a>\n                                    </li>\n                                }\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    xypoints: state.XandYPoints.points,\n    nvpoints: state.NameAndValuePoints.points,\n    selections: state.Selections.selections\n\n});\n\n\nexport default connect(mapStateToProps, {\n    addXYPoint,\n    addNameValuePoint,\n    removeAllXYPoints,\n    removeAllNameAndValuePoints,\n    setXLabel,\n    setYLabel,\n    setNameLabel,\n    setValueLabel,\n    setHelpVisible\n})(Header);","import React, { Component } from 'react';\nimport './App.css';\nimport store from './store';\n\nimport { Provider } from \"react-redux\";\n\nimport MainPage from \"./views/pages/MainPage\"\nimport Header from \"./views/components/Header\"\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <React.Fragment>\n            <div className=\"app\">\n              <Header />\n              <MainPage />\n            </div>\n          </React.Fragment>\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}